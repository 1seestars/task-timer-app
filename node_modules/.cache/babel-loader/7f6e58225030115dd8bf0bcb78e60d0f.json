{"ast":null,"code":"import _objectSpread from \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CHANGE_TIMER } from './actions.js';\nimport { GET_TASK_NAME } from './actions.js';\nimport { CHANGE_SECONDS } from './actions.js';\nimport { RESET_COUNT } from './actions.js';\nlet initialState;\n\nif (localStorage['redux-store']) {\n  initialState = JSON.parse(localStorage['redux-store']);\n} else {\n  initialState = {\n    isTimerWorking: false,\n    seconds: 0,\n    startTime: {\n      hours: null,\n      minutes: null\n    },\n    startMoment: null,\n    taskNameInput: '',\n    doneTasks: []\n  };\n}\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_TIMER:\n      return _objectSpread({}, state, {\n        isTimerWorking: !!state.taskNameInput ? !state.isTimerWorking : state.isTimerWorking,\n        startTime: {\n          hours: !state.isTimerWorking ? new Date().getHours() : null,\n          minutes: !state.isTimerWorking ? new Date().getMinutes() : null\n        },\n        startMoment: !state.isTimerWorking ? Date.now() : null,\n        taskNameInput: state.isTimerWorking ? '' : state.taskNameInput,\n        doneTasks: state.isTimerWorking ? [...state.doneTasks, {\n          id: Date.now(),\n          name: state.taskNameInput,\n          startTime: state.startTime,\n          stopTime: {\n            hours: new Date().getHours(),\n            minutes: new Date().getMinutes()\n          },\n          duration: ((Date.now() - state.startMoment) / 1000).toFixed(1)\n        }] : [...state.doneTasks]\n      });\n\n    case GET_TASK_NAME:\n      return _objectSpread({}, state, {\n        taskNameInput: action.payload\n      });\n\n    case CHANGE_SECONDS:\n      return _objectSpread({}, state, {\n        seconds: parseInt((action.payload - state.startMoment) / 1000)\n      });\n\n    case RESET_COUNT:\n      return _objectSpread({}, state, {\n        seconds: 0\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/store/reducers.js"],"names":["CHANGE_TIMER","GET_TASK_NAME","CHANGE_SECONDS","RESET_COUNT","initialState","localStorage","JSON","parse","isTimerWorking","seconds","startTime","hours","minutes","startMoment","taskNameInput","doneTasks","reducer","state","action","type","Date","getHours","getMinutes","now","id","name","stopTime","duration","toFixed","payload","parseInt"],"mappings":";AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,IAAIC,YAAJ;;AAEA,IAAGC,YAAY,CAAC,aAAD,CAAf,EAA+B;AAC3BD,EAAAA,YAAY,GAAGE,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,aAAD,CAAvB,CAAf;AACH,CAFD,MAEO;AACHD,EAAAA,YAAY,GAAG;AACXI,IAAAA,cAAc,EAAE,KADL;AAGXC,IAAAA,OAAO,EAAE,CAHE;AAIXC,IAAAA,SAAS,EAAE;AACPC,MAAAA,KAAK,EAAE,IADA;AAEPC,MAAAA,OAAO,EAAE;AAFF,KAJA;AAQXC,IAAAA,WAAW,EAAE,IARF;AASXC,IAAAA,aAAa,EAAE,EATJ;AAUXC,IAAAA,SAAS,EAAE;AAVA,GAAf;AAYH;;AAED,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKnB,YAAL;AACI,+BAAWiB,KAAX;AAAkBT,QAAAA,cAAc,EAAE,CAAC,CAACS,KAAK,CAACH,aAAR,GAAwB,CAACG,KAAK,CAACT,cAA/B,GAAgDS,KAAK,CAACT,cAAxF;AACIE,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE,CAACM,KAAK,CAACT,cAAP,GAAwB,IAAIY,IAAJ,GAAWC,QAAX,EAAxB,GAAgD,IADhD;AAEPT,UAAAA,OAAO,EAAE,CAACK,KAAK,CAACT,cAAP,GAAwB,IAAIY,IAAJ,GAAWE,UAAX,EAAxB,GAAkD;AAFpD,SADf;AAKIT,QAAAA,WAAW,EAAE,CAACI,KAAK,CAACT,cAAP,GAAwBY,IAAI,CAACG,GAAL,EAAxB,GAAqC,IALtD;AAMIT,QAAAA,aAAa,EAAEG,KAAK,CAACT,cAAN,GAAuB,EAAvB,GAA4BS,KAAK,CAACH,aANrD;AAOIC,QAAAA,SAAS,EAAEE,KAAK,CAACT,cAAN,GAAuB,CAAC,GAAGS,KAAK,CAACF,SAAV,EAAqB;AACnDS,UAAAA,EAAE,EAAEJ,IAAI,CAACG,GAAL,EAD+C;AAEnDE,UAAAA,IAAI,EAAER,KAAK,CAACH,aAFuC;AAGnDJ,UAAAA,SAAS,EAAEO,KAAK,CAACP,SAHkC;AAInDgB,UAAAA,QAAQ,EAAE;AACNf,YAAAA,KAAK,EAAE,IAAIS,IAAJ,GAAWC,QAAX,EADD;AAENT,YAAAA,OAAO,EAAE,IAAIQ,IAAJ,GAAWE,UAAX;AAFH,WAJyC;AAQnDK,UAAAA,QAAQ,EAAE,CAAC,CAACP,IAAI,CAACG,GAAL,KAAaN,KAAK,CAACJ,WAApB,IAAiC,IAAlC,EAAwCe,OAAxC,CAAgD,CAAhD;AARyC,SAArB,CAAvB,GASN,CAAC,GAAGX,KAAK,CAACF,SAAV;AAhBT;;AAkBJ,SAAKd,aAAL;AACI,+BAAWgB,KAAX;AAAkBH,QAAAA,aAAa,EAAEI,MAAM,CAACW;AAAxC;;AACJ,SAAK3B,cAAL;AACI,+BAAWe,KAAX;AAAkBR,QAAAA,OAAO,EAAEqB,QAAQ,CAAC,CAACZ,MAAM,CAACW,OAAP,GAAiBZ,KAAK,CAACJ,WAAxB,IAAqC,IAAtC;AAAnC;;AACJ,SAAKV,WAAL;AACI,+BAAWc,KAAX;AAAkBR,QAAAA,OAAO,EAAE;AAA3B;;AACJ;AACI,aAAOQ,KAAP;AA3BR;AA6BH,CA9BM","sourcesContent":["import { CHANGE_TIMER } from './actions.js'\nimport { GET_TASK_NAME } from './actions.js'\nimport { CHANGE_SECONDS } from './actions.js'\nimport { RESET_COUNT } from './actions.js'\n\nlet initialState\n\nif(localStorage['redux-store']){\n    initialState = JSON.parse(localStorage['redux-store'])\n} else {\n    initialState = {\n        isTimerWorking: false,\n        \n        seconds: 0,\n        startTime: {\n            hours: null,\n            minutes: null,\n        },\n        startMoment: null,\n        taskNameInput: '',\n        doneTasks: []\n    }\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type){\n        case CHANGE_TIMER: \n            return {...state, isTimerWorking: !!state.taskNameInput ? !state.isTimerWorking : state.isTimerWorking,\n                startTime: {\n                    hours: !state.isTimerWorking ? new Date().getHours() : null,\n                    minutes: !state.isTimerWorking ? new Date().getMinutes() : null,\n                },\n                startMoment: !state.isTimerWorking ? Date.now() : null,\n                taskNameInput: state.isTimerWorking ? '' : state.taskNameInput,\n                doneTasks: state.isTimerWorking ? [...state.doneTasks, {\n                    id: Date.now(),\n                    name: state.taskNameInput,\n                    startTime: state.startTime,\n                    stopTime: {\n                        hours: new Date().getHours(),\n                        minutes: new Date().getMinutes(),\n                    },\n                    duration: ((Date.now() - state.startMoment)/1000).toFixed(1)\n                }] : [...state.doneTasks]\n            }\n        case GET_TASK_NAME:\n            return {...state, taskNameInput: action.payload}\n        case CHANGE_SECONDS:\n            return {...state, seconds: parseInt((action.payload - state.startMoment)/1000)}\n        case RESET_COUNT:\n            return {...state, seconds: 0}\n        default: \n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}