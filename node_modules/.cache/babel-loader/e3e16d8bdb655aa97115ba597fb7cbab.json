{"ast":null,"code":"import _objectSpread from \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CHANGE_TIMER } from './actions.js';\nimport { GET_TASK_NAME } from './actions.js';\nimport { CHANGE_SECONDS } from './actions.js';\nimport { RESET_COUNT } from './actions.js';\nlet initialState;\n\nif (localStorage['redux-store']) {\n  initialState = JSON.parse(localStorage['redux-store']);\n} else {\n  initialState = {\n    isTimerWorking: false,\n    seconds: 0,\n    startTime: {\n      hours: null,\n      minutes: null\n    },\n    startMoment: null,\n    taskNameInput: '',\n    doneTasks: []\n  };\n}\n\nexport const reducer = (state = initialState, action) => {\n  if (!state.isTimerWorking && state.taskNameInput && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, state, {\n      isTimerWorking: true,\n      startTime: {\n        hours: new Date().getHours(),\n        minutes: new Date().getMinutes()\n      },\n      startMoment: Date.now()\n    });\n  } else if (!state.isTimerWorking && !state.taskNameInput && action.type === CHANGE_TIMER) {\n    return;\n  } else if (state.isTimerWorking && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, state, {\n      isTimerWorking: false,\n      doneTasks: [...state.doneTasks, {\n        id: Date.now(),\n        name: state.taskNameInput,\n        startTime: state.startTime,\n        stopTime: {\n          hours: new Date().getHours(),\n          minutes: new Date().getMinutes()\n        },\n        duration: ((Date.now() - state.startMoment) / 1000).toFixed(1)\n      }],\n      startTime: {\n        hours: null,\n        minutes: null\n      },\n      startMoment: null,\n      taskNameInput: ''\n    });\n  } else if (action.type === GET_TASK_NAME) {\n    return _objectSpread({}, state, {\n      taskNameInput: action.payload\n    });\n  } else if (action.type === CHANGE_SECONDS) {\n    return _objectSpread({}, state, {\n      seconds: parseInt((action.payload - state.startMoment) / 1000)\n    });\n  } else if (action.type === RESET_COUNT) {\n    return _objectSpread({}, state, {\n      seconds: 0\n    });\n  } else return state;\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/store/reducers.js"],"names":["CHANGE_TIMER","GET_TASK_NAME","CHANGE_SECONDS","RESET_COUNT","initialState","localStorage","JSON","parse","isTimerWorking","seconds","startTime","hours","minutes","startMoment","taskNameInput","doneTasks","reducer","state","action","type","Date","getHours","getMinutes","now","id","name","stopTime","duration","toFixed","payload","parseInt"],"mappings":"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","sourcesContent":["import { CHANGE_TIMER } from './actions.js'\nimport { GET_TASK_NAME } from './actions.js'\nimport { CHANGE_SECONDS } from './actions.js'\nimport { RESET_COUNT } from './actions.js'\n\nlet initialState\n\nif(localStorage['redux-store']){\n    initialState = JSON.parse(localStorage['redux-store'])\n} else {\n    initialState = {\n        isTimerWorking: false,\n        seconds: 0,\n        startTime: {\n            hours: null,\n            minutes: null,\n        },\n        startMoment: null,\n        taskNameInput: '',\n        doneTasks: []\n    }\n}\n\nexport const reducer = (state = initialState, action) => {\n    if (!state.isTimerWorking && state.taskNameInput && action.type === CHANGE_TIMER){\n        return {...state, isTimerWorking: true,\n            startTime: {\n                hours: new Date().getHours(),\n                minutes: new Date().getMinutes(),\n            },\n            startMoment: Date.now() \n        }\n    } else if (!state.isTimerWorking && !state.taskNameInput && action.type === CHANGE_TIMER){\n        return\n    } else if (state.isTimerWorking && action.type === CHANGE_TIMER){\n        return {...state, isTimerWorking: false,\n            doneTasks: [...state.doneTasks, {\n                id: Date.now(),\n                name: state.taskNameInput,\n                startTime: state.startTime,\n                stopTime: {\n                    hours: new Date().getHours(),\n                    minutes: new Date().getMinutes(),\n                },\n                duration: ((Date.now() - state.startMoment)/1000).toFixed(1)\n            }],\n            startTime: {\n                hours: null,\n                minutes: null,\n            },\n            startMoment: null,\n            taskNameInput: ''\n        }\n    } else if (action.type === GET_TASK_NAME){\n        return {...state, taskNameInput: action.payload}\n    } else if (action.type === CHANGE_SECONDS){\n        return {...state, seconds: parseInt((action.payload - state.startMoment)/1000)}\n    } else if (action.type === RESET_COUNT){\n        return {...state, seconds: 0}\n    } else return state\n}"]},"metadata":{},"sourceType":"module"}