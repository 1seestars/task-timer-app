{"ast":null,"code":"import _objectSpread from \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CHANGE_TIMER } from './actions.js';\nimport { GET_TASK_NAME } from './actions.js';\nimport { INCREASE_SECONDS } from './actions.js';\nimport { INCREASE_MINUTES } from './actions.js';\nconst initialState = {\n  isTimerWorking: false,\n  minutes: 0,\n  startTime: {\n    hours: null,\n    minutes: null\n  },\n  startMoment: null,\n  taskNameInput: '',\n  doneTasks: []\n};\nexport const reducer = (state = initialState, action) => {\n  if (!state.isTimerWorking && state.taskNameInput && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, state, {\n      isTimerWorking: true,\n      startTime: {\n        hours: new Date().getHours(),\n        minutes: new Date().getMinutes()\n      },\n      startMoment: Date.now()\n    });\n  } else if (state.isTimerWorking && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, state, {\n      isTimerWorking: false,\n      doneTasks: [...state.doneTasks, {\n        id: Date.now(),\n        name: state.taskNameInput,\n        startTime: state.startTime,\n        stopTime: {\n          hours: new Date().getHours(),\n          minutes: new Date().getMinutes()\n        },\n        duration: ((Date.now() - state.startMoment) / 1000).toFixed(1)\n      }],\n      startTime: {\n        hours: null,\n        minutes: null\n      },\n      startMoment: null,\n      taskNameInput: ''\n    });\n  } else if (action.type === GET_TASK_NAME) {\n    return _objectSpread({}, state, {\n      taskNameInput: action.payload\n    });\n  } else return state;\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/store/reducers.js"],"names":["CHANGE_TIMER","GET_TASK_NAME","INCREASE_SECONDS","INCREASE_MINUTES","initialState","isTimerWorking","minutes","startTime","hours","startMoment","taskNameInput","doneTasks","reducer","state","action","type","Date","getHours","getMinutes","now","id","name","stopTime","duration","toFixed","payload"],"mappings":";AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,KADC;AAEjBC,EAAAA,OAAO,EAAE,CAFQ;AAGjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,IADA;AAEPF,IAAAA,OAAO,EAAE;AAFF,GAHM;AAOjBG,EAAAA,WAAW,EAAE,IAPI;AAQjBC,EAAAA,aAAa,EAAE,EARE;AASjBC,EAAAA,SAAS,EAAE;AATM,CAArB;AAYA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACrD,MAAI,CAACD,KAAK,CAACR,cAAP,IAAyBQ,KAAK,CAACH,aAA/B,IAAgDI,MAAM,CAACC,IAAP,KAAgBf,YAApE,EAAiF;AAC7E,6BAAWa,KAAX;AAAkBR,MAAAA,cAAc,EAAE,IAAlC;AACIE,MAAAA,SAAS,EAAE;AACPC,QAAAA,KAAK,EAAE,IAAIQ,IAAJ,GAAWC,QAAX,EADA;AAEPX,QAAAA,OAAO,EAAE,IAAIU,IAAJ,GAAWE,UAAX;AAFF,OADf;AAKIT,MAAAA,WAAW,EAAEO,IAAI,CAACG,GAAL;AALjB;AAOH,GARD,MAQO,IAAIN,KAAK,CAACR,cAAN,IAAwBS,MAAM,CAACC,IAAP,KAAgBf,YAA5C,EAAyD;AAC5D,6BAAWa,KAAX;AAAkBR,MAAAA,cAAc,EAAE,KAAlC;AACIM,MAAAA,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAV,EAAqB;AAC5BS,QAAAA,EAAE,EAAEJ,IAAI,CAACG,GAAL,EADwB;AAE5BE,QAAAA,IAAI,EAAER,KAAK,CAACH,aAFgB;AAG5BH,QAAAA,SAAS,EAAEM,KAAK,CAACN,SAHW;AAI5Be,QAAAA,QAAQ,EAAE;AACNd,UAAAA,KAAK,EAAE,IAAIQ,IAAJ,GAAWC,QAAX,EADD;AAENX,UAAAA,OAAO,EAAE,IAAIU,IAAJ,GAAWE,UAAX;AAFH,SAJkB;AAQ5BK,QAAAA,QAAQ,EAAE,CAAC,CAACP,IAAI,CAACG,GAAL,KAAaN,KAAK,CAACJ,WAApB,IAAiC,IAAlC,EAAwCe,OAAxC,CAAgD,CAAhD;AARkB,OAArB,CADf;AAWIjB,MAAAA,SAAS,EAAE;AACPC,QAAAA,KAAK,EAAE,IADA;AAEPF,QAAAA,OAAO,EAAE;AAFF,OAXf;AAeIG,MAAAA,WAAW,EAAE,IAfjB;AAgBIC,MAAAA,aAAa,EAAE;AAhBnB;AAkBH,GAnBM,MAmBA,IAAII,MAAM,CAACC,IAAP,KAAgBd,aAApB,EAAmC;AACtC,6BAAWY,KAAX;AAAkBH,MAAAA,aAAa,EAAEI,MAAM,CAACW;AAAxC;AACH,GAFM,MAEA,OAAOZ,KAAP;AACV,CA/BM","sourcesContent":["import { CHANGE_TIMER } from './actions.js'\nimport { GET_TASK_NAME } from './actions.js'\nimport { INCREASE_SECONDS } from './actions.js'\nimport { INCREASE_MINUTES } from './actions.js'\n\nconst initialState = {\n    isTimerWorking: false,\n    minutes: 0,\n    startTime: {\n        hours: null,\n        minutes: null,\n    },\n    startMoment: null,\n    taskNameInput: '',\n    doneTasks: []\n}\n\nexport const reducer = (state = initialState, action) => {\n    if (!state.isTimerWorking && state.taskNameInput && action.type === CHANGE_TIMER){\n        return {...state, isTimerWorking: true,\n            startTime: {\n                hours: new Date().getHours(),\n                minutes: new Date().getMinutes(),\n            },\n            startMoment: Date.now() \n        }\n    } else if (state.isTimerWorking && action.type === CHANGE_TIMER){\n        return {...state, isTimerWorking: false,\n            doneTasks: [...state.doneTasks, {\n                id: Date.now(),\n                name: state.taskNameInput,\n                startTime: state.startTime,\n                stopTime: {\n                    hours: new Date().getHours(),\n                    minutes: new Date().getMinutes(),\n                },\n                duration: ((Date.now() - state.startMoment)/1000).toFixed(1)\n            }],\n            startTime: {\n                hours: null,\n                minutes: null,\n            },\n            startMoment: null,\n            taskNameInput: ''\n        }\n    } else if (action.type === GET_TASK_NAME) {\n        return {...state, taskNameInput: action.payload}\n    } else return state\n}\n"]},"metadata":{},"sourceType":"module"}