{"ast":null,"code":"var _jsxFileName = \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { increaseMinutesCount, increaseSecondsCount } from '../store/actions';\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          isTimerWorking = _this$props.isTimerWorking,\n          minutes = _this$props.minutes,\n          seconds = _this$props.seconds,\n          increaseMinutesCount = _this$props.increaseMinutesCount,\n          increaseSecondsCount = _this$props.increaseSecondsCount;\n\n    if (isTimerWorking) {\n      this.interval = setInterval(() => increaseSecondsCount(), 1000);\n    } // if(seconds > 5){\n    //     increaseMinutesCount()\n    // } else {\n    //     this.interval = setInterval(() => increaseSecondsCount(), 1000)\n    // }\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          minutes = _this$props2.minutes,\n          seconds = _this$props2.seconds;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, minutes < 10 ? `0${minutes}` : minutes, \":\", seconds < 10 ? `0${seconds}` : seconds);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isTimerWorking: state.isTimerWorking,\n    minutes: state.time.minutes,\n    seconds: state.time.seconds\n  };\n};\n\nconst mapDispatchToProps = {\n  increaseMinutesCount,\n  increaseSecondsCount\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","connect","increaseMinutesCount","increaseSecondsCount","Timer","Component","componentDidMount","props","isTimerWorking","minutes","seconds","interval","setInterval","componentWillUnmount","clearInterval","render","mapStateToProps","state","time","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,kBAA3D;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAmC;AAC/BC,EAAAA,iBAAiB,GAAE;AAAA,wBAOX,KAAKC,KAPM;AAAA,UAEXC,cAFW,eAEXA,cAFW;AAAA,UAGXC,OAHW,eAGXA,OAHW;AAAA,UAIXC,OAJW,eAIXA,OAJW;AAAA,UAKXR,oBALW,eAKXA,oBALW;AAAA,UAMXC,oBANW,eAMXA,oBANW;;AASf,QAAGK,cAAH,EAAkB;AACd,WAAKG,QAAL,GAAgBC,WAAW,CAAC,MAAMT,oBAAoB,EAA3B,EAA+B,IAA/B,CAA3B;AACH,KAXc,CAaf;AACA;AACA;AACA;AACA;;AACH;;AAEDU,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,QAAN,CAAb;AACH;;AAEDI,EAAAA,MAAM,GAAE;AAAA,yBAIA,KAAKR,KAJL;AAAA,UAEAE,OAFA,gBAEAA,OAFA;AAAA,UAGAC,OAHA,gBAGAA,OAHA;AAKJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMD,OAAO,GAAG,EAAX,GAAkB,IAAGA,OAAQ,EAA7B,GAAiCA,OADtC,OACiDC,OAAO,GAAG,EAAX,GAAkB,IAAGA,OAAQ,EAA7B,GAAiCA,OADjF,CADJ;AAKH;;AAnC8B;;AAsCnC,MAAMM,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHT,IAAAA,cAAc,EAAES,KAAK,CAACT,cADnB;AAEHC,IAAAA,OAAO,EAAEQ,KAAK,CAACC,IAAN,CAAWT,OAFjB;AAGHC,IAAAA,OAAO,EAAEO,KAAK,CAACC,IAAN,CAAWR;AAHjB,GAAP;AAKH,CAND;;AAQA,MAAMS,kBAAkB,GAAG;AAAEjB,EAAAA,oBAAF;AAAwBC,EAAAA;AAAxB,CAA3B;AAEA,eAAeF,OAAO,CAACe,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,KAA7C,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { increaseMinutesCount, increaseSecondsCount } from '../store/actions'\n\nclass Timer extends React.Component{\n    componentDidMount(){\n        const { \n            isTimerWorking,\n            minutes,\n            seconds,\n            increaseMinutesCount,\n            increaseSecondsCount\n        } = this.props\n\n        if(isTimerWorking){\n            this.interval = setInterval(() => increaseSecondsCount(), 1000)\n        }\n        \n        // if(seconds > 5){\n        //     increaseMinutesCount()\n        // } else {\n        //     this.interval = setInterval(() => increaseSecondsCount(), 1000)\n        // }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render(){\n        const {\n            minutes,\n            seconds\n        } = this.props\n        return(\n            <div>       \n                {(minutes < 10) ? `0${minutes}` : minutes}:{(seconds < 10) ? `0${seconds}` : seconds}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isTimerWorking: state.isTimerWorking,\n        minutes: state.time.minutes,\n        seconds: state.time.seconds\n    }\n}\n\nconst mapDispatchToProps = { increaseMinutesCount, increaseSecondsCount }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer)"]},"metadata":{},"sourceType":"module"}