{"ast":null,"code":"import _objectSpread from \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CHANGE_TIMER } from './actions.js';\nimport { GET_TASK_NAME } from './actions.js';\nimport { CHANGE_SECONDS } from './actions.js';\nimport { RESET_COUNT } from './actions.js';\nconst initialState = localStorage['redux-store'] ? JSON.parse(localStorage['redux-store']) : {\n  error\n}; // if(localStorage['redux-store']){\n//     const initialState = JSON.parse(localStorage['redux-store'])\n// } else {\n//     const initialState = {\n//         isTimerWorking: false,\n//         attentionBanner: false,\n//         seconds: 0,\n//         startTime: {\n//             hours: null,\n//             minutes: null,\n//         },\n//         startMoment: null,\n//         taskNameInput: '',\n//         doneTasks: []\n//     }\n// }\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_TIMER:\n      return _objectSpread({}, state, {\n        isTimerWorking: !!state.taskNameInput ? !state.isTimerWorking : state.isTimerWorking,\n        attentionBanner: !state.taskNameInput,\n        startTime: {\n          hours: !state.isTimerWorking ? new Date().getHours() : null,\n          minutes: !state.isTimerWorking ? new Date().getMinutes() : null\n        },\n        startMoment: !state.isTimerWorking ? Date.now() : null,\n        taskNameInput: state.isTimerWorking ? '' : state.taskNameInput,\n        doneTasks: state.isTimerWorking ? [...state.doneTasks, {\n          id: Date.now(),\n          name: state.taskNameInput,\n          startTime: state.startTime,\n          stopTime: {\n            hours: new Date().getHours(),\n            minutes: new Date().getMinutes()\n          },\n          duration: ((Date.now() - state.startMoment) / 1000).toFixed(1)\n        }] : [...state.doneTasks]\n      });\n\n    case GET_TASK_NAME:\n      return _objectSpread({}, state, {\n        taskNameInput: action.payload\n      });\n\n    case CHANGE_SECONDS:\n      return _objectSpread({}, state, {\n        seconds: state.startMoment ? parseInt((Date.now() - state.startMoment) / 1000) : 0\n      });\n\n    case RESET_COUNT:\n      return _objectSpread({}, state, {\n        seconds: 0\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/store/reducers.js"],"names":["CHANGE_TIMER","GET_TASK_NAME","CHANGE_SECONDS","RESET_COUNT","initialState","localStorage","JSON","parse","error","reducer","state","action","type","isTimerWorking","taskNameInput","attentionBanner","startTime","hours","Date","getHours","minutes","getMinutes","startMoment","now","doneTasks","id","name","stopTime","duration","toFixed","payload","seconds","parseInt"],"mappings":";AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAGA,MAAMC,YAAY,GAAIC,YAAY,CAAC,aAAD,CAAb,GAAgCC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,aAAD,CAAvB,CAAhC,GAA0E;AAACG,EAAAA;AAAD,CAA/F,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,YAAL;AACI,+BAAWU,KAAX;AAAkBG,QAAAA,cAAc,EAAE,CAAC,CAACH,KAAK,CAACI,aAAR,GAAwB,CAACJ,KAAK,CAACG,cAA/B,GAAgDH,KAAK,CAACG,cAAxF;AACIE,QAAAA,eAAe,EAAE,CAACL,KAAK,CAACI,aAD5B;AAEIE,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE,CAACP,KAAK,CAACG,cAAP,GAAwB,IAAIK,IAAJ,GAAWC,QAAX,EAAxB,GAAgD,IADhD;AAEPC,UAAAA,OAAO,EAAE,CAACV,KAAK,CAACG,cAAP,GAAwB,IAAIK,IAAJ,GAAWG,UAAX,EAAxB,GAAkD;AAFpD,SAFf;AAMIC,QAAAA,WAAW,EAAE,CAACZ,KAAK,CAACG,cAAP,GAAwBK,IAAI,CAACK,GAAL,EAAxB,GAAqC,IANtD;AAOIT,QAAAA,aAAa,EAAEJ,KAAK,CAACG,cAAN,GAAuB,EAAvB,GAA4BH,KAAK,CAACI,aAPrD;AAQIU,QAAAA,SAAS,EAAEd,KAAK,CAACG,cAAN,GAAuB,CAAC,GAAGH,KAAK,CAACc,SAAV,EAAqB;AACnDC,UAAAA,EAAE,EAAEP,IAAI,CAACK,GAAL,EAD+C;AAEnDG,UAAAA,IAAI,EAAEhB,KAAK,CAACI,aAFuC;AAGnDE,UAAAA,SAAS,EAAEN,KAAK,CAACM,SAHkC;AAInDW,UAAAA,QAAQ,EAAE;AACNV,YAAAA,KAAK,EAAE,IAAIC,IAAJ,GAAWC,QAAX,EADD;AAENC,YAAAA,OAAO,EAAE,IAAIF,IAAJ,GAAWG,UAAX;AAFH,WAJyC;AAQnDO,UAAAA,QAAQ,EAAE,CAAC,CAACV,IAAI,CAACK,GAAL,KAAab,KAAK,CAACY,WAApB,IAAiC,IAAlC,EAAwCO,OAAxC,CAAgD,CAAhD;AARyC,SAArB,CAAvB,GASN,CAAC,GAAGnB,KAAK,CAACc,SAAV;AAjBT;;AAmBJ,SAAKvB,aAAL;AACI,+BAAWS,KAAX;AAAkBI,QAAAA,aAAa,EAAEH,MAAM,CAACmB;AAAxC;;AACJ,SAAK5B,cAAL;AACI,+BAAWQ,KAAX;AAAkBqB,QAAAA,OAAO,EAAErB,KAAK,CAACY,WAAN,GAAoBU,QAAQ,CAAC,CAACd,IAAI,CAACK,GAAL,KAAab,KAAK,CAACY,WAApB,IAAiC,IAAlC,CAA5B,GAAsE;AAAjG;;AACJ,SAAKnB,WAAL;AACI,+BAAWO,KAAX;AAAkBqB,QAAAA,OAAO,EAAE;AAA3B;;AACJ;AACI,aAAOrB,KAAP;AA5BR;AA8BH,CA/BM","sourcesContent":["import { CHANGE_TIMER } from './actions.js'\nimport { GET_TASK_NAME } from './actions.js'\nimport { CHANGE_SECONDS } from './actions.js'\nimport { RESET_COUNT } from './actions.js'\n\n\nconst initialState = (localStorage['redux-store']) ? JSON.parse(localStorage['redux-store']) : {error}\n// if(localStorage['redux-store']){\n//     const initialState = JSON.parse(localStorage['redux-store'])\n// } else {\n//     const initialState = {\n//         isTimerWorking: false,\n//         attentionBanner: false,\n//         seconds: 0,\n//         startTime: {\n//             hours: null,\n//             minutes: null,\n//         },\n//         startMoment: null,\n//         taskNameInput: '',\n//         doneTasks: []\n//     }\n// }\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type){\n        case CHANGE_TIMER: \n            return {...state, isTimerWorking: !!state.taskNameInput ? !state.isTimerWorking : state.isTimerWorking,\n                attentionBanner: !state.taskNameInput,\n                startTime: {\n                    hours: !state.isTimerWorking ? new Date().getHours() : null,\n                    minutes: !state.isTimerWorking ? new Date().getMinutes() : null,\n                },\n                startMoment: !state.isTimerWorking ? Date.now() : null,\n                taskNameInput: state.isTimerWorking ? '' : state.taskNameInput,\n                doneTasks: state.isTimerWorking ? [...state.doneTasks, {\n                    id: Date.now(),\n                    name: state.taskNameInput,\n                    startTime: state.startTime,\n                    stopTime: {\n                        hours: new Date().getHours(),\n                        minutes: new Date().getMinutes(),\n                    },\n                    duration: ((Date.now() - state.startMoment)/1000).toFixed(1)\n                }] : [...state.doneTasks]\n            }\n        case GET_TASK_NAME:\n            return {...state, taskNameInput: action.payload}\n        case CHANGE_SECONDS:\n            return {...state, seconds: state.startMoment ? parseInt((Date.now() - state.startMoment)/1000) : 0}\n        case RESET_COUNT:\n            return {...state, seconds: 0}\n        default: \n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}