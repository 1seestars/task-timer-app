{"ast":null,"code":"var _jsxFileName = \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { changeSecondsCount, resetCount } from '../store/actions';\n\nclass Timer extends React.Component {\n  render() {\n    if (isTimerWorking) {\n      // setTimeout(() => {\n      //     changeSecondsCount()\n      // }, 1)\n      setTimeout(() => changeSecondsCount(), 1000);\n    } else if (seconds) {\n      setImmediate(() => resetCount());\n    }\n\n    console.log(seconds);\n    const showMinutes = parseInt(parseInt(seconds) / 60);\n    const showSeconds = parseInt(seconds) % 60;\n    return React.createElement(\"div\", {\n      id: \"clock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, showMinutes < 10 ? `0${showMinutes}` : showMinutes, \":\", showSeconds < 10 ? `0${showSeconds}` : showSeconds);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isTimerWorking: state.isTimerWorking,\n    seconds: state.seconds\n  };\n};\n\nconst mapDispatchToProps = {\n  changeSecondsCount,\n  resetCount\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","connect","changeSecondsCount","resetCount","Timer","Component","render","isTimerWorking","setTimeout","seconds","setImmediate","console","log","showMinutes","parseInt","showSeconds","mapStateToProps","state","mapDispatchToProps","MainComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,kBAA/C;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAmC;AAC/BC,EAAAA,MAAM,GAAE;AACJ,QAAGC,cAAH,EAAkB;AACd;AACA;AACA;AACAC,MAAAA,UAAU,CAAC,MAAMN,kBAAkB,EAAzB,EAA6B,IAA7B,CAAV;AACH,KALD,MAKO,IAAGO,OAAH,EAAW;AACdC,MAAAA,YAAY,CAAC,MAAMP,UAAU,EAAjB,CAAZ;AACH;;AAEDQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEA,UAAMI,WAAW,GAAGC,QAAQ,CAACA,QAAQ,CAACL,OAAD,CAAR,GAAkB,EAAnB,CAA5B;AACA,UAAMM,WAAW,GAAGD,QAAQ,CAACL,OAAD,CAAR,GAAoB,EAAxC;AAEA,WACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMI,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WAD9C,OAC6DE,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WADrG,CADJ;AAKH;;AArB8B;;AAwBnC,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHV,IAAAA,cAAc,EAAEU,KAAK,CAACV,cADnB;AAEHE,IAAAA,OAAO,EAAEQ,KAAK,CAACR;AAFZ,GAAP;AAIH,CALD;;AAOA,MAAMS,kBAAkB,GAAG;AACvBhB,EAAAA,kBADuB;AAEvBC,EAAAA;AAFuB,CAA3B;AAKA,eAAeF,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { changeSecondsCount, resetCount } from '../store/actions'\n\nclass Timer extends React.Component{\n    render(){\n        if(isTimerWorking){\n            // setTimeout(() => {\n            //     changeSecondsCount()\n            // }, 1)\n            setTimeout(() => changeSecondsCount(), 1000)\n        } else if(seconds){\n            setImmediate(() => resetCount())\n        }\n        \n        console.log(seconds)\n    \n        const showMinutes = parseInt(parseInt(seconds)/60)\n        const showSeconds = parseInt(seconds) % 60\n    \n        return(\n            <div id=\"clock\">       \n                {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isTimerWorking: state.isTimerWorking,\n        seconds: state.seconds,\n    }\n}\n\nconst mapDispatchToProps = { \n    changeSecondsCount,\n    resetCount\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent)"]},"metadata":{},"sourceType":"module"}