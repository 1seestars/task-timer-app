{"ast":null,"code":"import React from 'react';\nexport const Timer = props => {\n  const work = props.work,\n        start = props.start,\n        minutes = props.minutes,\n        seconds = props.seconds,\n        plusSecond = props.plusSecond,\n        restart = props.restart; // return(\n  //     <div>       \n  //         {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n  //     </div>\n  // )\n};\n/*\n    let timeOut\n    if(work){\n        timeOut = setTimeout(() => plusSecond(), 1000)\n        if(seconds > 59){\n            plusMinute()\n            clearTimeout(timeOut)\n        }\n    } else if(!work){\n        restart()\n        clearTimeout(timeOut)\n    }\n*/\n\n/*\n\n    let allSeconds = 0\n\n    if(work){\n        setTimeout(() => {\n            allSeconds = (Date.now() - start)/1000\n        }, 1000)\n    } else if(!work){\n        restart()\n    }\n\n    const showMinutes = parseInt(allSeconds / 60)\n    const showSeconds = allSeconds % 60\n\n    console.log(`0${showMinutes}:0${showSeconds}`)\n*/","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","Timer","props","work","start","minutes","seconds","plusSecond","restart"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA,QAEtBC,IAFsB,GAQtBD,KARsB,CAEtBC,IAFsB;AAAA,QAGtBC,KAHsB,GAQtBF,KARsB,CAGtBE,KAHsB;AAAA,QAItBC,OAJsB,GAQtBH,KARsB,CAItBG,OAJsB;AAAA,QAKtBC,OALsB,GAQtBJ,KARsB,CAKtBI,OALsB;AAAA,QAMtBC,UANsB,GAQtBL,KARsB,CAMtBK,UANsB;AAAA,QAOtBC,OAPsB,GAQtBN,KARsB,CAOtBM,OAPsB,EAW1B;AACA;AACA;AACA;AACA;AACH,CAhBM;AAkBP;;;;;;;;;;;;;;AAcA","sourcesContent":["import React from 'react'\n\nexport const Timer = props => {\n    const { \n        work, \n        start,\n        minutes, \n        seconds, \n        plusSecond, \n        restart \n    } = props\n\n\n    // return(\n    //     <div>       \n    //         {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n    //     </div>\n    // )\n}\n\n/*\n    let timeOut\n    if(work){\n        timeOut = setTimeout(() => plusSecond(), 1000)\n        if(seconds > 59){\n            plusMinute()\n            clearTimeout(timeOut)\n        }\n    } else if(!work){\n        restart()\n        clearTimeout(timeOut)\n    }\n*/\n\n/*\n\n    let allSeconds = 0\n\n    if(work){\n        setTimeout(() => {\n            allSeconds = (Date.now() - start)/1000\n        }, 1000)\n    } else if(!work){\n        restart()\n    }\n\n    const showMinutes = parseInt(allSeconds / 60)\n    const showSeconds = allSeconds % 60\n\n    console.log(`0${showMinutes}:0${showSeconds}`)\n*/"]},"metadata":{},"sourceType":"module"}