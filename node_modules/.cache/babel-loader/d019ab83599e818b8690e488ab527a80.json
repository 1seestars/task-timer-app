{"ast":null,"code":"var _jsxFileName = \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx\";\nimport React from 'react';\nexport const Timer = ({\n  work,\n  seconds,\n  plusSecond,\n  restart\n}) => {\n  if (work) {} else if (!work) {\n    restart();\n  }\n\n  work ? (setTimeout(() => plusSecond(), 1), setTimeout(() => plusSecond(), 1000)) : restart();\n  const showMinutes = parseInt(parseInt(seconds) / 60);\n  const showSeconds = parseInt(seconds) % 60;\n  return React.createElement(\"div\", {\n    id: \"clock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, showMinutes < 10 ? `0${showMinutes}` : showMinutes, \":\", showSeconds < 10 ? `0${showSeconds}` : showSeconds);\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","Timer","work","seconds","plusSecond","restart","setTimeout","showMinutes","parseInt","showSeconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,UAAjB;AAA6BC,EAAAA;AAA7B,CAAD,KAA4C;AAG7D,MAAGH,IAAH,EAAQ,CAGP,CAHD,MAGO,IAAG,CAACA,IAAJ,EAAU;AACbG,IAAAA,OAAO;AACV;;AAEDH,EAAAA,IAAI,IAAII,UAAU,CAAC,MAAMF,UAAU,EAAjB,EAAqB,CAArB,CAAV,EAAmCE,UAAU,CAAC,MAAMF,UAAU,EAAjB,EAAqB,IAArB,CAAjD,IAA+EC,OAAO,EAA1F;AAEA,QAAME,WAAW,GAAGC,QAAQ,CAACA,QAAQ,CAACL,OAAD,CAAR,GAAkB,EAAnB,CAA5B;AACA,QAAMM,WAAW,GAAGD,QAAQ,CAACL,OAAD,CAAR,GAAoB,EAAxC;AAEA,SACI;AAAK,IAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMI,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WAD9C,OAC6DE,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WADrG,CADJ;AAKH,CApBM","sourcesContent":["import React from 'react'\n\nexport const Timer = ({ work, seconds, plusSecond, restart }) => {\n\n    \n    if(work){\n        \n        \n    } else if(!work) {\n        restart()\n    }\n\n    work ? (setTimeout(() => plusSecond(), 1), setTimeout(() => plusSecond(), 1000)) : restart()\n\n    const showMinutes = parseInt(parseInt(seconds)/60)\n    const showSeconds = parseInt(seconds) % 60\n\n    return(\n        <div id=\"clock\">       \n            {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}