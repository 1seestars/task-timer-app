{"ast":null,"code":"var _jsxFileName = \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx\";\nimport React from 'react';\nexport const Timer = props => {\n  const work = props.work,\n        seconds = props.seconds,\n        plusSecond = props.plusSecond,\n        restart = props.restart;\n\n  if (work) {\n    setTimeout(() => plusSecond(), 1000);\n  } else if (!work) {\n    restart();\n  }\n\n  const showMinutes = parseInt(seconds / 60);\n  const showSeconds = seconds % 60;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, showMinutes < 10 ? `0${showMinutes}` : showMinutes, \":\", showSeconds < 10 ? `0${showSeconds}` : showSeconds);\n};\n/*\n    let timeOut\n    if(work){\n        timeOut = setTimeout(() => plusSecond(), 1000)\n        if(seconds > 59){\n            plusMinute()\n            clearTimeout(timeOut)\n        }\n    } else if(!work){\n        restart()\n        clearTimeout(timeOut)\n    }\n*/\n\n/*\n\n    let allSeconds = 0\n\n    if(work){\n        setTimeout(() => {\n            allSeconds = (Date.now() - start)/1000\n        }, 1000)\n    } else if(!work){\n        restart()\n    }\n\n    const showMinutes = parseInt(allSeconds / 60)\n    const showSeconds = allSeconds % 60\n\n    console.log(`0${showMinutes}:0${showSeconds}`)\n*/","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","Timer","props","work","seconds","plusSecond","restart","setTimeout","showMinutes","parseInt","showSeconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA,QAEtBC,IAFsB,GAMtBD,KANsB,CAEtBC,IAFsB;AAAA,QAGtBC,OAHsB,GAMtBF,KANsB,CAGtBE,OAHsB;AAAA,QAItBC,UAJsB,GAMtBH,KANsB,CAItBG,UAJsB;AAAA,QAKtBC,OALsB,GAMtBJ,KANsB,CAKtBI,OALsB;;AAQ1B,MAAGH,IAAH,EAAQ;AACJI,IAAAA,UAAU,CAAC,MAAMF,UAAU,EAAjB,EAAqB,IAArB,CAAV;AACH,GAFD,MAEO,IAAG,CAACF,IAAJ,EAAU;AACbG,IAAAA,OAAO;AACV;;AAED,QAAME,WAAW,GAAGC,QAAQ,CAACL,OAAO,GAAC,EAAT,CAA5B;AACA,QAAMM,WAAW,GAAGN,OAAO,GAAG,EAA9B;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMI,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WAD9C,OAC6DE,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WADrG,CADJ;AAKH,CAtBM;AAwBP;;;;;;;;;;;;;;AAcA","sourcesContent":["import React from 'react'\n\nexport const Timer = props => {\n    const { \n        work, \n        seconds, \n        plusSecond, \n        restart \n    } = props\n    \n    if(work){\n        setTimeout(() => plusSecond(), 1000)\n    } else if(!work) {\n        restart()\n    }\n\n    const showMinutes = parseInt(seconds/60)\n    const showSeconds = seconds % 60\n\n    return(\n        <div>       \n            {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n        </div>\n    )\n}\n\n/*\n    let timeOut\n    if(work){\n        timeOut = setTimeout(() => plusSecond(), 1000)\n        if(seconds > 59){\n            plusMinute()\n            clearTimeout(timeOut)\n        }\n    } else if(!work){\n        restart()\n        clearTimeout(timeOut)\n    }\n*/\n\n/*\n\n    let allSeconds = 0\n\n    if(work){\n        setTimeout(() => {\n            allSeconds = (Date.now() - start)/1000\n        }, 1000)\n    } else if(!work){\n        restart()\n    }\n\n    const showMinutes = parseInt(allSeconds / 60)\n    const showSeconds = allSeconds % 60\n\n    console.log(`0${showMinutes}:0${showSeconds}`)\n*/"]},"metadata":{},"sourceType":"module"}