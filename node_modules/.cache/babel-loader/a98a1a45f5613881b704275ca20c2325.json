{"ast":null,"code":"import _objectSpread from \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CHANGE_TIMER } from './actions.js';\nimport { GET_TASK_NAME } from './actions.js';\nimport { CHANGE_SECONDS } from './actions.js';\nimport { RESET_COUNT } from './actions.js';\nlet initialthis;\n\nif (localStorage['redux-store']) {\n  initialthis = JSON.parse(localStorage['redux-store']);\n} else {\n  initialthis = {\n    isTimerWorking: false,\n    onButtonClick: false,\n    seconds: 0,\n    startTime: {\n      hours: null,\n      minutes: null\n    },\n    startMoment: null,\n    taskNameInput: '',\n    doneTasks: []\n  };\n}\n\nexport const reducer = (state = initialthis, action) => {\n  if (!this.isTimerWorking && this.taskNameInput && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, this, {\n      isTimerWorking: true,\n      onButtonClick: false,\n      startTime: {\n        hours: new Date().getHours(),\n        minutes: new Date().getMinutes()\n      },\n      startMoment: Date.now()\n    });\n  } else if (!this.isTimerWorking && !this.taskNameInput && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, this, {\n      onButtonClick: true\n    });\n  } else if (this.isTimerWorking && action.type === CHANGE_TIMER) {\n    return _objectSpread({}, this, {\n      isTimerWorking: false,\n      doneTasks: [...this.doneTasks, {\n        id: Date.now(),\n        name: this.taskNameInput,\n        startTime: this.startTime,\n        stopTime: {\n          hours: new Date().getHours(),\n          minutes: new Date().getMinutes()\n        },\n        duration: ((Date.now() - this.startMoment) / 1000).toFixed(1)\n      }],\n      startTime: {\n        hours: null,\n        minutes: null\n      },\n      startMoment: null,\n      taskNameInput: ''\n    });\n  } else if (action.type === GET_TASK_NAME) {\n    return _objectSpread({}, this, {\n      taskNameInput: action.payload\n    });\n  } else if (action.type === CHANGE_SECONDS) {\n    return _objectSpread({}, this, {\n      seconds: parseInt((action.payload - this.startMoment) / 1000)\n    });\n  } else if (action.type === RESET_COUNT) {\n    return _objectSpread({}, this, {\n      seconds: 0\n    });\n  } else return this;\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/store/reducers.js"],"names":["CHANGE_TIMER","GET_TASK_NAME","CHANGE_SECONDS","RESET_COUNT","initialthis","localStorage","JSON","parse","isTimerWorking","onButtonClick","seconds","startTime","hours","minutes","startMoment","taskNameInput","doneTasks","reducer","state","action","type","Date","getHours","getMinutes","now","id","name","stopTime","duration","toFixed","payload","parseInt"],"mappings":"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","sourcesContent":["import { CHANGE_TIMER } from './actions.js'\nimport { GET_TASK_NAME } from './actions.js'\nimport { CHANGE_SECONDS } from './actions.js'\nimport { RESET_COUNT } from './actions.js'\n\nlet initialthis\n\nif(localStorage['redux-store']){\n    initialthis = JSON.parse(localStorage['redux-store'])\n} else {\n    initialthis = {\n        isTimerWorking: false,\n        onButtonClick: false,\n        seconds: 0,\n        startTime: {\n            hours: null,\n            minutes: null,\n        },\n        startMoment: null,\n        taskNameInput: '',\n        doneTasks: []\n    }\n}\n\nexport const reducer = (state = initialthis, action) => {\n    if (!this.isTimerWorking && this.taskNameInput && action.type === CHANGE_TIMER){\n        return {...this, isTimerWorking: true,\n            onButtonClick: false,\n            startTime: {\n                hours: new Date().getHours(),\n                minutes: new Date().getMinutes(),\n            },\n            startMoment: Date.now() \n        }\n    } else if (!this.isTimerWorking && !this.taskNameInput && action.type === CHANGE_TIMER){\n        return {\n            ...this, onButtonClick: true\n        }\n    } else if (this.isTimerWorking && action.type === CHANGE_TIMER){\n        return {...this, isTimerWorking: false,\n            doneTasks: [...this.doneTasks, {\n                id: Date.now(),\n                name: this.taskNameInput,\n                startTime: this.startTime,\n                stopTime: {\n                    hours: new Date().getHours(),\n                    minutes: new Date().getMinutes(),\n                },\n                duration: ((Date.now() - this.startMoment)/1000).toFixed(1)\n            }],\n            startTime: {\n                hours: null,\n                minutes: null,\n            },\n            startMoment: null,\n            taskNameInput: ''\n        }\n    } else if (action.type === GET_TASK_NAME){\n        return {...this, taskNameInput: action.payload}\n    } else if (action.type === CHANGE_SECONDS){\n        return {...this, seconds: parseInt((action.payload - this.startMoment)/1000)}\n    } else if (action.type === RESET_COUNT){\n        return {...this, seconds: 0}\n    } else return this\n}"]},"metadata":{},"sourceType":"module"}