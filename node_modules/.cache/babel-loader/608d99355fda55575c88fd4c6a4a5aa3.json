{"ast":null,"code":"var _jsxFileName = \"/home/iseestars/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx\";\nimport React from 'react';\nexport const Timer = ({\n  isTimerWorking,\n  seconds,\n  changeSecondsCount,\n  resetCount\n}) => {\n  let interval;\n\n  if (isTimerWorking) {\n    interval = setInterval(() => changeSecondsCount(), 1000);\n  } else {\n    clearInterval(interval);\n    setImmediate(() => resetCount());\n  }\n\n  const showMinutes = parseInt(parseInt(seconds) / 60);\n  const showSeconds = parseInt(seconds) % 60;\n  return React.createElement(\"div\", {\n    id: \"clock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, showMinutes < 10 ? `0${showMinutes}` : showMinutes, \":\", showSeconds < 10 ? `0${showSeconds}` : showSeconds);\n};","map":{"version":3,"sources":["/home/iseestars/Документы/js-projects/test-react-apps/task-timer-app/src/components/Timer.jsx"],"names":["React","Timer","isTimerWorking","seconds","changeSecondsCount","resetCount","interval","setInterval","clearInterval","setImmediate","showMinutes","parseInt","showSeconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA,kBAA3B;AAA+CC,EAAAA;AAA/C,CAAD,KAAiE;AAClF,MAAIC,QAAJ;;AAEA,MAAGJ,cAAH,EAAkB;AACdI,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAMH,kBAAkB,EAAzB,EAA6B,IAA7B,CAAtB;AACH,GAFD,MAEO;AACHI,IAAAA,aAAa,CAACF,QAAD,CAAb;AACAG,IAAAA,YAAY,CAAC,MAAMJ,UAAU,EAAjB,CAAZ;AACH;;AAED,QAAMK,WAAW,GAAGC,QAAQ,CAACA,QAAQ,CAACR,OAAD,CAAR,GAAkB,EAAnB,CAA5B;AACA,QAAMS,WAAW,GAAGD,QAAQ,CAACR,OAAD,CAAR,GAAoB,EAAxC;AAEA,SACI;AAAK,IAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMO,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WAD9C,OAC6DE,WAAW,GAAG,EAAf,GAAsB,IAAGA,WAAY,EAArC,GAAyCA,WADrG,CADJ;AAKH,CAlBM","sourcesContent":["import React from 'react'\n\nexport const Timer = ({ isTimerWorking, seconds, changeSecondsCount, resetCount }) => {\n    let interval\n\n    if(isTimerWorking){\n        interval = setInterval(() => changeSecondsCount(), 1000)\n    } else {\n        clearInterval(interval)\n        setImmediate(() => resetCount())   \n    }\n\n    const showMinutes = parseInt(parseInt(seconds)/60)\n    const showSeconds = parseInt(seconds) % 60\n\n    return(\n        <div id=\"clock\">       \n            {(showMinutes < 10) ? `0${showMinutes}` : showMinutes}:{(showSeconds < 10) ? `0${showSeconds}` : showSeconds}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}